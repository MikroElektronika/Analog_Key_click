;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 6.12.2018. 16:05:00
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x0000000408E0  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x08E0	0x2084EF  	MOV	#2126, W15
0x08E2	0x27FFF0  	MOV	#32767, W0
0x08E4	0xB7A020  	MOV	WREG, SPLIM
0x08E6	0x200010  	MOV	#1, W0
0x08E8	0xB7A034  	MOV	WREG, PSVPAG
0x08EA	0x200040  	MOV	#4, W0
0x08EC	0xB72044  	IOR	CORCON
0x08EE	0x000000020900  	CALL	2304
0x08F2	0x00000002090A  	CALL	2314
;Click_AnalogKey_DSPIC.c,77 :: 		void main()
;Click_AnalogKey_DSPIC.c,79 :: 		systemInit();
0x08F6	0x07FFE5  	RCALL	_systemInit
;Click_AnalogKey_DSPIC.c,80 :: 		applicationInit();
0x08F8	0x07FFA9  	RCALL	_applicationInit
;Click_AnalogKey_DSPIC.c,82 :: 		while (1)
L_main6:
;Click_AnalogKey_DSPIC.c,84 :: 		applicationTask();
0x08FA	0x07FFB7  	RCALL	_applicationTask
;Click_AnalogKey_DSPIC.c,85 :: 		}
0x08FC	0x37FFFE  	BRA	L_main6
;Click_AnalogKey_DSPIC.c,86 :: 		}
L_end_main:
L__main_end_loop:
0x08FE	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_systemInit:
;Click_AnalogKey_DSPIC.c,31 :: 		void systemInit()
;Click_AnalogKey_DSPIC.c,33 :: 		mikrobus_logInit( _LOG_USBUART_A, 9600 );
0x08C2	0x781F8A  	PUSH	W10
0x08C4	0x781F8B  	PUSH	W11
0x08C6	0x781F8C  	PUSH	W12
0x08C8	0x22580B  	MOV	#9600, W11
0x08CA	0x20000C  	MOV	#0, W12
0x08CC	0xB3C20A  	MOV.B	#32, W10
0x08CE	0x07FF57  	RCALL	_mikrobus_logInit
;Click_AnalogKey_DSPIC.c,34 :: 		mikrobus_logWrite("--- System Init ---", _LOG_LINE);
0x08D0	0xB3C02B  	MOV.B	#2, W11
0x08D2	0x20816A  	MOV	#lo_addr(?lstr1_Click_AnalogKey_DSPIC), W10
0x08D4	0x07FF83  	RCALL	_mikrobus_logWrite
;Click_AnalogKey_DSPIC.c,35 :: 		Delay_100ms();
0x08D6	0x07FC94  	RCALL	_Delay_100ms
;Click_AnalogKey_DSPIC.c,36 :: 		}
L_end_systemInit:
0x08D8	0x78064F  	POP	W12
0x08DA	0x7805CF  	POP	W11
0x08DC	0x78054F  	POP	W10
0x08DE	0x060000  	RETURN
; end of _systemInit
_mikrobus_logInit:
;easypicfusion_v7_P33FJ256GP710A.c,283 :: 		T_mikrobus_ret mikrobus_logInit(T_log_bus port, const uint32_t baud)
;easypicfusion_v7_P33FJ256GP710A.c,285 :: 		switch( port )
0x077E	0x781F8A  	PUSH	W10
0x0780	0x781F8B  	PUSH	W11
0x0782	0x781F8C  	PUSH	W12
0x0784	0x370012  	BRA	L_mikrobus_logInit35
;easypicfusion_v7_P33FJ256GP710A.c,288 :: 		case _MIKROBUS1 : return _log_init1( baud );
L_mikrobus_logInit37:
0x0786	0x78050B  	MOV	W11, W10
0x0788	0x78058C  	MOV	W12, W11
0x078A	0x07FEDB  	RCALL	easypicfusion_v7_P33FJ256GP710A__log_init1
0x078C	0x370019  	BRA	L_end_mikrobus_logInit
;easypicfusion_v7_P33FJ256GP710A.c,291 :: 		case _MIKROBUS2: return _log_init2( baud );
L_mikrobus_logInit38:
0x078E	0x78050B  	MOV	W11, W10
0x0790	0x78058C  	MOV	W12, W11
0x0792	0x07FF2A  	RCALL	easypicfusion_v7_P33FJ256GP710A__log_init2
0x0794	0x370015  	BRA	L_end_mikrobus_logInit
;easypicfusion_v7_P33FJ256GP710A.c,309 :: 		case _LOG_USBUART_A : return _log_initUartA( baud );
L_mikrobus_logInit39:
0x0796	0x78050B  	MOV	W11, W10
0x0798	0x78058C  	MOV	W12, W11
0x079A	0x07FEFD  	RCALL	easypicfusion_v7_P33FJ256GP710A__log_initUartA
0x079C	0x370011  	BRA	L_end_mikrobus_logInit
;easypicfusion_v7_P33FJ256GP710A.c,312 :: 		case _LOG_USBUART_B : return _log_initUartB( baud );
L_mikrobus_logInit40:
0x079E	0x78050B  	MOV	W11, W10
0x07A0	0x78058C  	MOV	W12, W11
0x07A2	0x07FEF4  	RCALL	easypicfusion_v7_P33FJ256GP710A__log_initUartB
0x07A4	0x37000D  	BRA	L_end_mikrobus_logInit
;easypicfusion_v7_P33FJ256GP710A.c,314 :: 		default : return _MIKROBUS_ERR_BUS;
L_mikrobus_logInit41:
0x07A6	0xB3C010  	MOV.B	#1, W0
0x07A8	0x37000B  	BRA	L_end_mikrobus_logInit
;easypicfusion_v7_P33FJ256GP710A.c,315 :: 		}
L_mikrobus_logInit35:
0x07AA	0xE15460  	CP.B	W10, #0
0x07AC	0x32FFEC  	BRA Z	L_mikrobus_logInit37
L__mikrobus_logInit135:
0x07AE	0xE15461  	CP.B	W10, #1
0x07B0	0x32FFEE  	BRA Z	L_mikrobus_logInit38
L__mikrobus_logInit136:
0x07B2	0xB3C200  	MOV.B	#32, W0
0x07B4	0xE15400  	CP.B	W10, W0
0x07B6	0x32FFEF  	BRA Z	L_mikrobus_logInit39
L__mikrobus_logInit137:
0x07B8	0xB3C300  	MOV.B	#48, W0
0x07BA	0xE15400  	CP.B	W10, W0
0x07BC	0x32FFF0  	BRA Z	L_mikrobus_logInit40
L__mikrobus_logInit138:
0x07BE	0x37FFF3  	BRA	L_mikrobus_logInit41
;easypicfusion_v7_P33FJ256GP710A.c,317 :: 		}
L_end_mikrobus_logInit:
0x07C0	0x78064F  	POP	W12
0x07C2	0x7805CF  	POP	W11
0x07C4	0x78054F  	POP	W10
0x07C6	0x060000  	RETURN
; end of _mikrobus_logInit
easypicfusion_v7_P33FJ256GP710A__log_init1:
;__epf_33fj256gp710a_log.c,23 :: 		static T_mikrobus_ret _log_init1(uint32_t baud)
;__epf_33fj256gp710a_log.c,25 :: 		UART2_Init(baud);
0x0542	0x07FF7E  	RCALL	_UART2_Init
;__epf_33fj256gp710a_log.c,26 :: 		logger = UART2_Write;
0x0544	0x203220  	MOV	#lo_addr(_UART2_Write), W0
0x0546	0x884260  	MOV	W0, _logger
;__epf_33fj256gp710a_log.c,27 :: 		return 0;
0x0548	0xEF2000  	CLR	W0
;__epf_33fj256gp710a_log.c,28 :: 		}
L_end__log_init1:
0x054A	0x060000  	RETURN
; end of easypicfusion_v7_P33FJ256GP710A__log_init1
_UART2_Init:
0x0440	0xFA0008  	LNK	#8
;__Lib_UART_12_p24_p33.c,380 :: 		
;__Lib_UART_12_p24_p33.c,383 :: 		
0x0442	0x203220  	MOV	#lo_addr(_UART2_Write), W0
0x0444	0x884240  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p24_p33.c,384 :: 		
0x0446	0x2FFFF0  	MOV	#lo_addr(_UART2_Read), W0
0x0448	0x884230  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p24_p33.c,385 :: 		
0x044A	0x2FFFF0  	MOV	#lo_addr(_UART2_Data_Ready), W0
0x044C	0x884210  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p24_p33.c,386 :: 		
0x044E	0x2FFFF0  	MOV	#lo_addr(_UART2_Tx_Idle), W0
0x0450	0x884220  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p24_p33.c,391 :: 		
0x0452	0xEF2230  	CLR	U2MODE
;__Lib_UART_12_p24_p33.c,392 :: 		
0x0454	0x280000  	MOV	#32768, W0
0x0456	0xB7A232  	MOV	WREG, U2STA
;__Lib_UART_12_p24_p33.c,396 :: 		
0x0458	0xA96230  	BCLR.B	U2MODE, #3
;__Lib_UART_12_p24_p33.c,397 :: 		
0x045A	0x07FF39  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x045C	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,399 :: 		
0x045E	0x203E80  	MOV	#1000, W0
0x0460	0x200001  	MOV	#0, W1
0x0462	0x07FED7  	RCALL	__Multiply_32x32
0x0464	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,401 :: 		
0x0466	0x07FED3  	RCALL	_Get_Fosc_Per_Cyc
0x0468	0xDE0041  	LSR	W0, #1, W0
0x046A	0x400064  	ADD	W0, #4, W0
0x046C	0x780080  	MOV	W0, W1
0x046E	0x470060  	ADD	W14, #0, W0
0x0470	0xBE880A  	MOV.D	W10, [W0]
L__UART2_Init120:
0x0472	0xE90081  	DEC	W1, W1
0x0474	0x350003  	BRA LT	L__UART2_Init121
0x0476	0xD01810  	SL	[W0], [W0++]
0x0478	0xD29010  	RLC	[W0], [W0--]
0x047A	0x37FFFB  	BRA	L__UART2_Init120
L__UART2_Init121:
;__Lib_UART_12_p24_p33.c,403 :: 		
0x047C	0xBE9F82  	PUSH.D	W2
0x047E	0xBE9F8A  	PUSH.D	W10
0x0480	0xBE0002  	MOV.D	W2, W0
0x0482	0x90010E  	MOV	[W14+0], W2
0x0484	0x90019E  	MOV	[W14+2], W3
0x0486	0xEB0200  	CLR	W4
0x0488	0x07FEF6  	RCALL	__Modulus_32x32
0x048A	0xBE054F  	POP.D	W10
0x048C	0xBE014F  	POP.D	W2
0x048E	0x980720  	MOV	W0, [W14+4]
0x0490	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,404 :: 		
0x0492	0xBE9F8A  	PUSH.D	W10
; tmp end address is: 4 (W2)
0x0494	0xBE0002  	MOV.D	W2, W0
0x0496	0x90010E  	MOV	[W14+0], W2
0x0498	0x90019E  	MOV	[W14+2], W3
0x049A	0xEB0200  	CLR	W4
0x049C	0x07FEC3  	RCALL	__Divide_32x32
0x049E	0xBE054F  	POP.D	W10
; tmp start address is: 6 (W3)
0x04A0	0x780180  	MOV	W0, W3
0x04A2	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,406 :: 		
0x04A4	0x470060  	ADD	W14, #0, W0
0x04A6	0xD10150  	LSR	[++W0], W2
0x04A8	0xD380C0  	RRC	[--W0], W1
0x04AA	0x470064  	ADD	W14, #4, W0
0x04AC	0xE10830  	CP	W1, [W0++]
0x04AE	0xE19020  	CPB	W2, [W0--]
0x04B0	0x310007  	BRA GEU	L__UART2_Init66
L__UART2_Init122:
;__Lib_UART_12_p24_p33.c,407 :: 		
0x04B2	0x418061  	ADD	W3, #1, W0
0x04B4	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x04B6	0x780280  	MOV	W0, W5
0x04B8	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x04BA	0x780105  	MOV	W5, W2
0x04BC	0x780186  	MOV	W6, W3
0x04BE	0x370002  	BRA	L_UART2_Init38
L__UART2_Init66:
;__Lib_UART_12_p24_p33.c,406 :: 		
0x04C0	0x780103  	MOV	W3, W2
0x04C2	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,407 :: 		
L_UART2_Init38:
;__Lib_UART_12_p24_p33.c,410 :: 		
; tmp start address is: 4 (W2)
0x04C4	0x718002  	IOR	W3, W2, W0
0x04C6	0x3A0033  	BRA NZ	L__UART2_Init68
L__UART2_Init123:
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,412 :: 		
0x04C8	0x07FF02  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x04CA	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,414 :: 		
0x04CC	0x203E80  	MOV	#1000, W0
0x04CE	0x200001  	MOV	#0, W1
0x04D0	0x07FEA0  	RCALL	__Multiply_32x32
0x04D2	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,416 :: 		
0x04D4	0x07FE9C  	RCALL	_Get_Fosc_Per_Cyc
0x04D6	0xDE0041  	LSR	W0, #1, W0
0x04D8	0xECA000  	INC2	W0
0x04DA	0x780080  	MOV	W0, W1
0x04DC	0x470060  	ADD	W14, #0, W0
0x04DE	0xBE880A  	MOV.D	W10, [W0]
L__UART2_Init124:
0x04E0	0xE90081  	DEC	W1, W1
0x04E2	0x350003  	BRA LT	L__UART2_Init125
0x04E4	0xD01810  	SL	[W0], [W0++]
0x04E6	0xD29010  	RLC	[W0], [W0--]
0x04E8	0x37FFFB  	BRA	L__UART2_Init124
L__UART2_Init125:
;__Lib_UART_12_p24_p33.c,418 :: 		
0x04EA	0xBE9F82  	PUSH.D	W2
0x04EC	0xBE0002  	MOV.D	W2, W0
0x04EE	0x90010E  	MOV	[W14+0], W2
0x04F0	0x90019E  	MOV	[W14+2], W3
0x04F2	0xEB0200  	CLR	W4
0x04F4	0x07FEC0  	RCALL	__Modulus_32x32
0x04F6	0xBE014F  	POP.D	W2
0x04F8	0x980720  	MOV	W0, [W14+4]
0x04FA	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,419 :: 		
0x04FC	0xBE0002  	MOV.D	W2, W0
0x04FE	0x90010E  	MOV	[W14+0], W2
0x0500	0x90019E  	MOV	[W14+2], W3
0x0502	0xEB0200  	CLR	W4
0x0504	0x07FE8F  	RCALL	__Divide_32x32
; tmp end address is: 4 (W2)
; tmp start address is: 6 (W3)
0x0506	0x780180  	MOV	W0, W3
0x0508	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,421 :: 		
0x050A	0x470060  	ADD	W14, #0, W0
0x050C	0xD10150  	LSR	[++W0], W2
0x050E	0xD380C0  	RRC	[--W0], W1
0x0510	0x470064  	ADD	W14, #4, W0
0x0512	0xE10830  	CP	W1, [W0++]
0x0514	0xE19020  	CPB	W2, [W0--]
0x0516	0x310007  	BRA GEU	L__UART2_Init67
L__UART2_Init126:
;__Lib_UART_12_p24_p33.c,422 :: 		
0x0518	0x418061  	ADD	W3, #1, W0
0x051A	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x051C	0x780280  	MOV	W0, W5
0x051E	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x0520	0x780105  	MOV	W5, W2
0x0522	0x780186  	MOV	W6, W3
0x0524	0x370002  	BRA	L_UART2_Init40
L__UART2_Init67:
;__Lib_UART_12_p24_p33.c,421 :: 		
0x0526	0x780103  	MOV	W3, W2
0x0528	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,422 :: 		
L_UART2_Init40:
;__Lib_UART_12_p24_p33.c,424 :: 		
; tmp start address is: 4 (W2)
0x052A	0xA86230  	BSET.B	U2MODE, #3
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,425 :: 		
0x052C	0x370000  	BRA	L_UART2_Init39
L__UART2_Init68:
;__Lib_UART_12_p24_p33.c,410 :: 		
;__Lib_UART_12_p24_p33.c,425 :: 		
L_UART2_Init39:
;__Lib_UART_12_p24_p33.c,427 :: 		
; tmp start address is: 4 (W2)
0x052E	0x510061  	SUB	W2, #1, W0
0x0530	0x5980E0  	SUBB	W3, #0, W1
; tmp end address is: 4 (W2)
; tmp start address is: 0 (W0)
0x0532	0x8811C0  	MOV	W0, U2BRG
; tmp end address is: 0 (W0)
;__Lib_UART_12_p24_p33.c,430 :: 		
0x0534	0xA92232  	BCLR.B	U2STA, #1
;__Lib_UART_12_p24_p33.c,432 :: 		
0x0536	0xA8E231  	BSET	U2MODE, #15
;__Lib_UART_12_p24_p33.c,433 :: 		
0x0538	0xA84233  	BSET	U2STA, #10
;__Lib_UART_12_p24_p33.c,435 :: 		
0x053A	0x07FE62  	RCALL	_Delay_100ms
0x053C	0x07FE61  	RCALL	_Delay_100ms
;__Lib_UART_12_p24_p33.c,437 :: 		
L_end_UART2_Init:
0x053E	0xFA8000  	ULNK
0x0540	0x060000  	RETURN
; end of _UART2_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x02CE	0x21F400  	MOV	#8000, W0
0x02D0	0x200001  	MOV	#0, W1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x02D2	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x020E	0x200020  	MOV	#2, W0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x0210	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x0200	0x200038  	MOV	#3, W8
0x0202	0x208D57  	MOV	#2261, W7
L_Delay_100ms31:
0x0204	0xED200E  	DEC	W7
0x0206	0x3AFFFE  	BRA NZ	L_Delay_100ms31
0x0208	0xED2010  	DEC	W8
0x020A	0x3AFFFC  	BRA NZ	L_Delay_100ms31
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x020C	0x060000  	RETURN
; end of _Delay_100ms
__Multiply_32x32:
0x0212	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x0214	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x0216	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x0218	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x021A	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x021C	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x021E	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x0220	0xFA8000  	ULNK
0x0222	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x0276	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x0278	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x027A	0x0000000402CA  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x027E	0xE20008  	CP0	W4
;__Lib_Math.c,173 :: 		
0x0280	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x0282	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x0284	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x0286	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.c,180 :: 		
0x0288	0xE20002  	CP0	W1
;__Lib_Math.c,181 :: 		
0x028A	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x028C	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,183 :: 		
0x028E	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x0290	0xE20006  	CP0	W3
;__Lib_Math.c,186 :: 		
0x0292	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x0294	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,188 :: 		
0x0296	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x0298	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x029A	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,192 :: 		
0x029C	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x029E	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,194 :: 		
0x02A0	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x02A2	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x02A4	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x02A6	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.c,200 :: 		
0x02A8	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x02AA	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,203 :: 		
0x02AC	0x200206  	MOV	#32, W6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x02AE	0xD00000  	SL	W0, W0
;__Lib_Math.c,206 :: 		
0x02B0	0xD28081  	RLC	W1, W1
;__Lib_Math.c,207 :: 		
0x02B2	0xD28204  	RLC	W4, W4
;__Lib_Math.c,208 :: 		
0x02B4	0xD28285  	RLC	W5, W5
;__Lib_Math.c,209 :: 		
0x02B6	0xA80000  	BSET	W0, #0
;__Lib_Math.c,210 :: 		
0x02B8	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,211 :: 		
0x02BA	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,212 :: 		
0x02BC	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x02BE	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,214 :: 		
0x02C0	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,215 :: 		
0x02C2	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x02C4	0xE90306  	DEC	W6, W6
;__Lib_Math.c,218 :: 		
0x02C6	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x02C8	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x02CA	0xFA8000  	ULNK
0x02CC	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x0224	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x0226	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x0228	0x000000040272  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x022C	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x022E	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x0230	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x0232	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x0234	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x0236	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x0238	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x023A	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x023C	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x023E	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x0240	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x0242	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x0244	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x0246	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x0248	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x024A	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x024C	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x024E	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x0250	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x0252	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x0254	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x0256	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x0258	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x025A	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x025C	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x025E	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x0260	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x0262	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x0264	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x0266	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x0268	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x026A	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x026C	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x026E	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x0270	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x0272	0xFA8000  	ULNK
0x0274	0x060000  	RETURN
; end of __Divide_32x32
easypicfusion_v7_P33FJ256GP710A__log_init2:
;__epf_33fj256gp710a_log.c,30 :: 		static T_mikrobus_ret _log_init2(uint32_t baud)
;__epf_33fj256gp710a_log.c,32 :: 		return _MIKROBUS_ERR_LOG;
0x05E8	0xB3C060  	MOV.B	#6, W0
;__epf_33fj256gp710a_log.c,33 :: 		}
L_end__log_init2:
0x05EA	0x060000  	RETURN
; end of easypicfusion_v7_P33FJ256GP710A__log_init2
easypicfusion_v7_P33FJ256GP710A__log_initUartA:
;__epf_33fj256gp710a_log.c,35 :: 		static T_mikrobus_ret _log_initUartA(uint32_t baud)
;__epf_33fj256gp710a_log.c,37 :: 		UART2_Init(baud);
0x0596	0x07FF54  	RCALL	_UART2_Init
;__epf_33fj256gp710a_log.c,38 :: 		logger = UART2_Write;
0x0598	0x203220  	MOV	#lo_addr(_UART2_Write), W0
0x059A	0x884260  	MOV	W0, _logger
;__epf_33fj256gp710a_log.c,39 :: 		return 0;
0x059C	0xEF2000  	CLR	W0
;__epf_33fj256gp710a_log.c,40 :: 		}
L_end__log_initUartA:
0x059E	0x060000  	RETURN
; end of easypicfusion_v7_P33FJ256GP710A__log_initUartA
easypicfusion_v7_P33FJ256GP710A__log_initUartB:
;__epf_33fj256gp710a_log.c,42 :: 		static T_mikrobus_ret _log_initUartB(uint32_t baud)
;__epf_33fj256gp710a_log.c,44 :: 		UART1_Init(baud);
0x058C	0x07FED1  	RCALL	_UART1_Init
;__epf_33fj256gp710a_log.c,45 :: 		logger = UART1_Write;
0x058E	0x204320  	MOV	#lo_addr(_UART1_Write), W0
0x0590	0x884260  	MOV	W0, _logger
;__epf_33fj256gp710a_log.c,46 :: 		return 0;
0x0592	0xEF2000  	CLR	W0
;__epf_33fj256gp710a_log.c,47 :: 		}
L_end__log_initUartB:
0x0594	0x060000  	RETURN
; end of easypicfusion_v7_P33FJ256GP710A__log_initUartB
_UART1_Init:
0x0330	0xFA0008  	LNK	#8
;__Lib_UART_12_p24_p33.c,145 :: 		
;__Lib_UART_12_p24_p33.c,148 :: 		
0x0332	0x204320  	MOV	#lo_addr(_UART1_Write), W0
0x0334	0x884240  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p24_p33.c,149 :: 		
0x0336	0x2FFFF0  	MOV	#lo_addr(_UART1_Read), W0
0x0338	0x884230  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p24_p33.c,150 :: 		
0x033A	0x2FFFF0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x033C	0x884210  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p24_p33.c,151 :: 		
0x033E	0x2FFFF0  	MOV	#lo_addr(_UART1_Tx_Idle), W0
0x0340	0x884220  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p24_p33.c,156 :: 		
0x0342	0xEF2220  	CLR	U1MODE
;__Lib_UART_12_p24_p33.c,157 :: 		
0x0344	0x280000  	MOV	#32768, W0
0x0346	0xB7A222  	MOV	WREG, U1STA
;__Lib_UART_12_p24_p33.c,161 :: 		
0x0348	0xA96220  	BCLR.B	U1MODE, #3
;__Lib_UART_12_p24_p33.c,162 :: 		
0x034A	0x07FFC1  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x034C	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,164 :: 		
0x034E	0x203E80  	MOV	#1000, W0
0x0350	0x200001  	MOV	#0, W1
0x0352	0x07FF5F  	RCALL	__Multiply_32x32
0x0354	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,166 :: 		
0x0356	0x07FF5B  	RCALL	_Get_Fosc_Per_Cyc
0x0358	0xDE0041  	LSR	W0, #1, W0
0x035A	0x400064  	ADD	W0, #4, W0
0x035C	0x780080  	MOV	W0, W1
0x035E	0x470060  	ADD	W14, #0, W0
0x0360	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init83:
0x0362	0xE90081  	DEC	W1, W1
0x0364	0x350003  	BRA LT	L__UART1_Init84
0x0366	0xD01810  	SL	[W0], [W0++]
0x0368	0xD29010  	RLC	[W0], [W0--]
0x036A	0x37FFFB  	BRA	L__UART1_Init83
L__UART1_Init84:
;__Lib_UART_12_p24_p33.c,168 :: 		
0x036C	0xBE9F82  	PUSH.D	W2
0x036E	0xBE9F8A  	PUSH.D	W10
0x0370	0xBE0002  	MOV.D	W2, W0
0x0372	0x90010E  	MOV	[W14+0], W2
0x0374	0x90019E  	MOV	[W14+2], W3
0x0376	0xEB0200  	CLR	W4
0x0378	0x07FF7E  	RCALL	__Modulus_32x32
0x037A	0xBE054F  	POP.D	W10
0x037C	0xBE014F  	POP.D	W2
0x037E	0x980720  	MOV	W0, [W14+4]
0x0380	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,169 :: 		
0x0382	0xBE9F8A  	PUSH.D	W10
; tmp end address is: 4 (W2)
0x0384	0xBE0002  	MOV.D	W2, W0
0x0386	0x90010E  	MOV	[W14+0], W2
0x0388	0x90019E  	MOV	[W14+2], W3
0x038A	0xEB0200  	CLR	W4
0x038C	0x07FF4B  	RCALL	__Divide_32x32
0x038E	0xBE054F  	POP.D	W10
; tmp start address is: 6 (W3)
0x0390	0x780180  	MOV	W0, W3
0x0392	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,171 :: 		
0x0394	0x470060  	ADD	W14, #0, W0
0x0396	0xD10150  	LSR	[++W0], W2
0x0398	0xD380C0  	RRC	[--W0], W1
0x039A	0x470064  	ADD	W14, #4, W0
0x039C	0xE10830  	CP	W1, [W0++]
0x039E	0xE19020  	CPB	W2, [W0--]
0x03A0	0x310007  	BRA GEU	L__UART1_Init62
L__UART1_Init85:
;__Lib_UART_12_p24_p33.c,172 :: 		
0x03A2	0x418061  	ADD	W3, #1, W0
0x03A4	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x03A6	0x780280  	MOV	W0, W5
0x03A8	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x03AA	0x780105  	MOV	W5, W2
0x03AC	0x780186  	MOV	W6, W3
0x03AE	0x370002  	BRA	L_UART1_Init13
L__UART1_Init62:
;__Lib_UART_12_p24_p33.c,171 :: 		
0x03B0	0x780103  	MOV	W3, W2
0x03B2	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,172 :: 		
L_UART1_Init13:
;__Lib_UART_12_p24_p33.c,175 :: 		
; tmp start address is: 4 (W2)
0x03B4	0x718002  	IOR	W3, W2, W0
0x03B6	0x3A0033  	BRA NZ	L__UART1_Init64
L__UART1_Init86:
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,177 :: 		
0x03B8	0x07FF8A  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x03BA	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,179 :: 		
0x03BC	0x203E80  	MOV	#1000, W0
0x03BE	0x200001  	MOV	#0, W1
0x03C0	0x07FF28  	RCALL	__Multiply_32x32
0x03C2	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,181 :: 		
0x03C4	0x07FF24  	RCALL	_Get_Fosc_Per_Cyc
0x03C6	0xDE0041  	LSR	W0, #1, W0
0x03C8	0xECA000  	INC2	W0
0x03CA	0x780080  	MOV	W0, W1
0x03CC	0x470060  	ADD	W14, #0, W0
0x03CE	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init87:
0x03D0	0xE90081  	DEC	W1, W1
0x03D2	0x350003  	BRA LT	L__UART1_Init88
0x03D4	0xD01810  	SL	[W0], [W0++]
0x03D6	0xD29010  	RLC	[W0], [W0--]
0x03D8	0x37FFFB  	BRA	L__UART1_Init87
L__UART1_Init88:
;__Lib_UART_12_p24_p33.c,183 :: 		
0x03DA	0xBE9F82  	PUSH.D	W2
0x03DC	0xBE0002  	MOV.D	W2, W0
0x03DE	0x90010E  	MOV	[W14+0], W2
0x03E0	0x90019E  	MOV	[W14+2], W3
0x03E2	0xEB0200  	CLR	W4
0x03E4	0x07FF48  	RCALL	__Modulus_32x32
0x03E6	0xBE014F  	POP.D	W2
0x03E8	0x980720  	MOV	W0, [W14+4]
0x03EA	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,184 :: 		
0x03EC	0xBE0002  	MOV.D	W2, W0
0x03EE	0x90010E  	MOV	[W14+0], W2
0x03F0	0x90019E  	MOV	[W14+2], W3
0x03F2	0xEB0200  	CLR	W4
0x03F4	0x07FF17  	RCALL	__Divide_32x32
; tmp end address is: 4 (W2)
; tmp start address is: 6 (W3)
0x03F6	0x780180  	MOV	W0, W3
0x03F8	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,186 :: 		
0x03FA	0x470060  	ADD	W14, #0, W0
0x03FC	0xD10150  	LSR	[++W0], W2
0x03FE	0xD380C0  	RRC	[--W0], W1
0x0400	0x470064  	ADD	W14, #4, W0
0x0402	0xE10830  	CP	W1, [W0++]
0x0404	0xE19020  	CPB	W2, [W0--]
0x0406	0x310007  	BRA GEU	L__UART1_Init63
L__UART1_Init89:
;__Lib_UART_12_p24_p33.c,187 :: 		
0x0408	0x418061  	ADD	W3, #1, W0
0x040A	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x040C	0x780280  	MOV	W0, W5
0x040E	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x0410	0x780105  	MOV	W5, W2
0x0412	0x780186  	MOV	W6, W3
0x0414	0x370002  	BRA	L_UART1_Init15
L__UART1_Init63:
;__Lib_UART_12_p24_p33.c,186 :: 		
0x0416	0x780103  	MOV	W3, W2
0x0418	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,187 :: 		
L_UART1_Init15:
;__Lib_UART_12_p24_p33.c,189 :: 		
; tmp start address is: 4 (W2)
0x041A	0xA86220  	BSET.B	U1MODE, #3
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,190 :: 		
0x041C	0x370000  	BRA	L_UART1_Init14
L__UART1_Init64:
;__Lib_UART_12_p24_p33.c,175 :: 		
;__Lib_UART_12_p24_p33.c,190 :: 		
L_UART1_Init14:
;__Lib_UART_12_p24_p33.c,192 :: 		
; tmp start address is: 4 (W2)
0x041E	0x510061  	SUB	W2, #1, W0
0x0420	0x5980E0  	SUBB	W3, #0, W1
; tmp end address is: 4 (W2)
; tmp start address is: 0 (W0)
0x0422	0x881140  	MOV	W0, U1BRG
; tmp end address is: 0 (W0)
;__Lib_UART_12_p24_p33.c,195 :: 		
0x0424	0xA92222  	BCLR.B	U1STA, #1
;__Lib_UART_12_p24_p33.c,197 :: 		
0x0426	0xA8E221  	BSET	U1MODE, #15
;__Lib_UART_12_p24_p33.c,198 :: 		
0x0428	0xA84223  	BSET	U1STA, #10
;__Lib_UART_12_p24_p33.c,200 :: 		
0x042A	0x07FEEA  	RCALL	_Delay_100ms
0x042C	0x07FEE9  	RCALL	_Delay_100ms
;__Lib_UART_12_p24_p33.c,202 :: 		
L_end_UART1_Init:
0x042E	0xFA8000  	ULNK
0x0430	0x060000  	RETURN
; end of _UART1_Init
_mikrobus_logWrite:
0x07DC	0xFA0002  	LNK	#2
;easypicfusion_v7_P33FJ256GP710A.c,319 :: 		T_mikrobus_ret mikrobus_logWrite(uint8_t* data_, T_log_format format)
;easypicfusion_v7_P33FJ256GP710A.c,321 :: 		uint8_t *ptr = data_;
0x07DE	0x781F8A  	PUSH	W10
; ptr start address is: 2 (W1)
0x07E0	0x78008A  	MOV	W10, W1
;easypicfusion_v7_P33FJ256GP710A.c,322 :: 		uint8_t row = 13;
0x07E2	0x2000D0  	MOV	#13, W0
0x07E4	0x984700  	MOV.B	W0, [W14+0]
0x07E6	0x2000A0  	MOV	#10, W0
0x07E8	0x984710  	MOV.B	W0, [W14+1]
;easypicfusion_v7_P33FJ256GP710A.c,323 :: 		uint8_t line = 10;
;easypicfusion_v7_P33FJ256GP710A.c,324 :: 		switch( format )
0x07EA	0x370025  	BRA	L_mikrobus_logWrite42
;easypicfusion_v7_P33FJ256GP710A.c,326 :: 		case _LOG_BYTE :
L_mikrobus_logWrite44:
;easypicfusion_v7_P33FJ256GP710A.c,327 :: 		_log_write( ptr );
0x07EC	0x780501  	MOV	W1, W10
; ptr end address is: 2 (W1)
0x07EE	0x07FEC7  	RCALL	easypicfusion_v7_P33FJ256GP710A__log_write
;easypicfusion_v7_P33FJ256GP710A.c,328 :: 		break;
0x07F0	0x370029  	BRA	L_mikrobus_logWrite43
;easypicfusion_v7_P33FJ256GP710A.c,329 :: 		case _LOG_TEXT :
L_mikrobus_logWrite45:
;easypicfusion_v7_P33FJ256GP710A.c,330 :: 		while( *ptr )
; ptr start address is: 2 (W1)
0x07F2	0x780001  	MOV	W1, W0
L_mikrobus_logWrite46:
; ptr end address is: 2 (W1)
; ptr start address is: 0 (W0)
0x07F4	0xE00410  	CP0.B	[W0]
0x07F6	0x320008  	BRA Z	L_mikrobus_logWrite47
L__mikrobus_logWrite140:
;easypicfusion_v7_P33FJ256GP710A.c,332 :: 		_log_write( ptr );
0x07F8	0x781F80  	PUSH	W0
0x07FA	0xBE9F8A  	PUSH.D	W10
0x07FC	0x780500  	MOV	W0, W10
0x07FE	0x07FEBF  	RCALL	easypicfusion_v7_P33FJ256GP710A__log_write
0x0800	0xBE054F  	POP.D	W10
0x0802	0x78004F  	POP	W0
;easypicfusion_v7_P33FJ256GP710A.c,333 :: 		ptr++;
0x0804	0xEC2000  	INC	W0
;easypicfusion_v7_P33FJ256GP710A.c,334 :: 		}
; ptr end address is: 0 (W0)
0x0806	0x37FFF6  	BRA	L_mikrobus_logWrite46
L_mikrobus_logWrite47:
;easypicfusion_v7_P33FJ256GP710A.c,335 :: 		break;
0x0808	0x37001D  	BRA	L_mikrobus_logWrite43
;easypicfusion_v7_P33FJ256GP710A.c,336 :: 		case _LOG_LINE :
L_mikrobus_logWrite48:
;easypicfusion_v7_P33FJ256GP710A.c,337 :: 		while( *ptr )
; ptr start address is: 2 (W1)
0x080A	0x780001  	MOV	W1, W0
L_mikrobus_logWrite49:
; ptr end address is: 2 (W1)
; ptr start address is: 0 (W0)
0x080C	0xE00410  	CP0.B	[W0]
0x080E	0x320008  	BRA Z	L_mikrobus_logWrite50
L__mikrobus_logWrite141:
;easypicfusion_v7_P33FJ256GP710A.c,339 :: 		_log_write( ptr );
0x0810	0x781F80  	PUSH	W0
0x0812	0xBE9F8A  	PUSH.D	W10
0x0814	0x780500  	MOV	W0, W10
0x0816	0x07FEB3  	RCALL	easypicfusion_v7_P33FJ256GP710A__log_write
0x0818	0xBE054F  	POP.D	W10
0x081A	0x78004F  	POP	W0
;easypicfusion_v7_P33FJ256GP710A.c,340 :: 		ptr++;
0x081C	0xEC2000  	INC	W0
;easypicfusion_v7_P33FJ256GP710A.c,341 :: 		}
; ptr end address is: 0 (W0)
0x081E	0x37FFF6  	BRA	L_mikrobus_logWrite49
L_mikrobus_logWrite50:
;easypicfusion_v7_P33FJ256GP710A.c,342 :: 		_log_write( &row );
0x0820	0x470060  	ADD	W14, #0, W0
0x0822	0xBE9F8A  	PUSH.D	W10
0x0824	0x780500  	MOV	W0, W10
0x0826	0x07FEAB  	RCALL	easypicfusion_v7_P33FJ256GP710A__log_write
;easypicfusion_v7_P33FJ256GP710A.c,343 :: 		_log_write( &line );
0x0828	0x470061  	ADD	W14, #1, W0
0x082A	0x780500  	MOV	W0, W10
0x082C	0x07FEA8  	RCALL	easypicfusion_v7_P33FJ256GP710A__log_write
0x082E	0xBE054F  	POP.D	W10
;easypicfusion_v7_P33FJ256GP710A.c,344 :: 		break;
0x0830	0x370009  	BRA	L_mikrobus_logWrite43
;easypicfusion_v7_P33FJ256GP710A.c,345 :: 		default :
L_mikrobus_logWrite51:
;easypicfusion_v7_P33FJ256GP710A.c,346 :: 		return _MIKROBUS_ERR_LOG;
0x0832	0xB3C060  	MOV.B	#6, W0
0x0834	0x370007  	BRA	L_end_mikrobus_logWrite
;easypicfusion_v7_P33FJ256GP710A.c,347 :: 		}
L_mikrobus_logWrite42:
; ptr start address is: 2 (W1)
0x0836	0xE15C60  	CP.B	W11, #0
0x0838	0x32FFD9  	BRA Z	L_mikrobus_logWrite44
L__mikrobus_logWrite142:
0x083A	0xE15C61  	CP.B	W11, #1
0x083C	0x32FFDA  	BRA Z	L_mikrobus_logWrite45
L__mikrobus_logWrite143:
0x083E	0xE15C62  	CP.B	W11, #2
0x0840	0x32FFE4  	BRA Z	L_mikrobus_logWrite48
L__mikrobus_logWrite144:
; ptr end address is: 2 (W1)
0x0842	0x37FFF7  	BRA	L_mikrobus_logWrite51
L_mikrobus_logWrite43:
;easypicfusion_v7_P33FJ256GP710A.c,348 :: 		}
L_end_mikrobus_logWrite:
0x0844	0x78054F  	POP	W10
0x0846	0xFA8000  	ULNK
0x0848	0x060000  	RETURN
; end of _mikrobus_logWrite
easypicfusion_v7_P33FJ256GP710A__log_write:
;__epf_33fj256gp710a_log.c,17 :: 		static T_mikrobus_ret _log_write(uint8_t *data_)
;__epf_33fj256gp710a_log.c,19 :: 		logger( *data_ );
0x057E	0x781F8A  	PUSH	W10
0x0580	0xFB851A  	ZE	[W10], W10
0x0582	0x804260  	MOV	_logger, W0
0x0584	0x010000  	CALL	W0
;__epf_33fj256gp710a_log.c,20 :: 		return 0;
0x0586	0xEF2000  	CLR	W0
;__epf_33fj256gp710a_log.c,21 :: 		}
;__epf_33fj256gp710a_log.c,20 :: 		return 0;
;__epf_33fj256gp710a_log.c,21 :: 		}
L_end__log_write:
0x0588	0x78054F  	POP	W10
0x058A	0x060000  	RETURN
; end of easypicfusion_v7_P33FJ256GP710A__log_write
_UART1_Write:
0x0432	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,70 :: 		
;__Lib_UART_12_p24_p33.c,71 :: 		
L_UART1_Write0:
0x0434	0xAF0223  	BTSC	U1STA, #8
0x0436	0x370001  	BRA	L_UART1_Write1
0x0438	0x37FFFD  	BRA	L_UART1_Write0
L_UART1_Write1:
;__Lib_UART_12_p24_p33.c,72 :: 		
0x043A	0x88112A  	MOV	W10, U1TXREG
;__Lib_UART_12_p24_p33.c,73 :: 		
L_end_UART1_Write:
0x043C	0xFA8000  	ULNK
0x043E	0x060000  	RETURN
; end of _UART1_Write
_UART2_Write:
0x0322	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,305 :: 		
;__Lib_UART_12_p24_p33.c,306 :: 		
L_UART2_Write25:
0x0324	0xAF0233  	BTSC	U2STA, #8
0x0326	0x370001  	BRA	L_UART2_Write26
0x0328	0x37FFFD  	BRA	L_UART2_Write25
L_UART2_Write26:
;__Lib_UART_12_p24_p33.c,307 :: 		
0x032A	0x8811AA  	MOV	W10, U2TXREG
;__Lib_UART_12_p24_p33.c,308 :: 		
L_end_UART2_Write:
0x032C	0xFA8000  	ULNK
0x032E	0x060000  	RETURN
; end of _UART2_Write
_applicationInit:
;Click_AnalogKey_DSPIC.c,38 :: 		void applicationInit()
;Click_AnalogKey_DSPIC.c,41 :: 		analogkey_gpioDriverInit( (T_ANALOGKEY_P)&_MIKROBUS1_GPIO );
0x084C	0x781F8A  	PUSH	W10
0x084E	0x781F8B  	PUSH	W11
0x0850	0x28042A  	MOV	#lo_addr(__MIKROBUS1_GPIO), W10
0x0852	0x07FFBA  	RCALL	_analogkey_gpioDriverInit
;Click_AnalogKey_DSPIC.c,42 :: 		analogkey_setResolution(_ANALOGKEY_ADC_RESOLUTION_10bit);
0x0854	0xB3C01A  	MOV.B	#1, W10
0x0856	0x07FF85  	RCALL	_analogkey_setResolution
;Click_AnalogKey_DSPIC.c,44 :: 		analogkey_adcSetInputChannel();
0x0858	0x07FFF8  	RCALL	_analogkey_adcSetInputChannel
;Click_AnalogKey_DSPIC.c,45 :: 		analogkey_adcInit();
0x085A	0x07FFB8  	RCALL	_analogkey_adcInit
;Click_AnalogKey_DSPIC.c,46 :: 		Delay_100ms();
0x085C	0x07FCD1  	RCALL	_Delay_100ms
;Click_AnalogKey_DSPIC.c,48 :: 		mikrobus_logWrite("Press the button :D", _LOG_LINE);
0x085E	0xB3C02B  	MOV.B	#2, W11
0x0860	0x2082AA  	MOV	#lo_addr(?lstr2_Click_AnalogKey_DSPIC), W10
0x0862	0x07FFBC  	RCALL	_mikrobus_logWrite
;Click_AnalogKey_DSPIC.c,49 :: 		}
L_end_applicationInit:
0x0864	0x7805CF  	POP	W11
0x0866	0x78054F  	POP	W10
0x0868	0x060000  	RETURN
; end of _applicationInit
_analogkey_gpioDriverInit:
;__analogkey_Driver.c,78 :: 		void analogkey_gpioDriverInit(T_ANALOGKEY_P gpioObj)
;__analogkey_Driver.c,80 :: 		hal_gpioMap( (T_HAL_P)gpioObj );
0x07C8	0x07FEC1  	RCALL	__analogkey_Driver_hal_gpioMap
;__analogkey_Driver.c,81 :: 		}
L_end_analogkey_gpioDriverInit:
0x07CA	0x060000  	RETURN
; end of _analogkey_gpioDriverInit
__analogkey_Driver_hal_gpioMap:
;__analogkey_hal.c,321 :: 		static void hal_gpioMap(T_HAL_P gpioObj)
;__analogkey_hal.c,397 :: 		}
L_end_hal_gpioMap:
0x054C	0x060000  	RETURN
; end of __analogkey_Driver_hal_gpioMap
_analogkey_setResolution:
;__analogkey_Driver.c,114 :: 		void analogkey_setResolution(uint8_t resolution)
;__analogkey_Driver.c,116 :: 		if(resolution == _ANALOGKEY_ADC_RESOLUTION_10bit)
0x0762	0xE15461  	CP.B	W10, #1
0x0764	0x3A0006  	BRA NZ	L_analogkey_setResolution23
L__analogkey_setResolution59:
;__analogkey_Driver.c,118 :: 		_maxADC = 1023;
0x0766	0x203FF0  	MOV	#1023, W0
0x0768	0x8841F0  	MOV	W0, __analogkey_Driver__maxADC
;__analogkey_Driver.c,119 :: 		_prec = 51;
0x076A	0x208401  	MOV	#lo_addr(__analogkey_Driver__prec), W1
0x076C	0xB3C330  	MOV.B	#51, W0
0x076E	0x784880  	MOV.B	W0, [W1]
;__analogkey_Driver.c,120 :: 		}
0x0770	0x370005  	BRA	L_analogkey_setResolution24
L_analogkey_setResolution23:
;__analogkey_Driver.c,123 :: 		_maxADC = 4095;
0x0772	0x20FFF0  	MOV	#4095, W0
0x0774	0x8841F0  	MOV	W0, __analogkey_Driver__maxADC
;__analogkey_Driver.c,124 :: 		_prec = 205;
0x0776	0x208401  	MOV	#lo_addr(__analogkey_Driver__prec), W1
0x0778	0xB3CCD0  	MOV.B	#205, W0
0x077A	0x784880  	MOV.B	W0, [W1]
;__analogkey_Driver.c,125 :: 		}
L_analogkey_setResolution24:
;__analogkey_Driver.c,126 :: 		}
L_end_analogkey_setResolution:
0x077C	0x060000  	RETURN
; end of _analogkey_setResolution
_analogkey_adcSetInputChannel:
;click_analogkey_adc.h,9 :: 		void analogkey_adcSetInputChannel()
;click_analogkey_adc.h,12 :: 		}
L_end_analogkey_adcSetInputChannel:
0x084A	0x060000  	RETURN
; end of _analogkey_adcSetInputChannel
_analogkey_adcInit:
;click_analogkey_adc.h,4 :: 		void analogkey_adcInit()
;click_analogkey_adc.h,6 :: 		ADC1_Init_Advanced(_ADC_12bit, _ADC_INTERNAL_VREFL | _ADC_INTERNAL_VREFH);
0x07CC	0x781F8A  	PUSH	W10
0x07CE	0x781F8B  	PUSH	W11
0x07D0	0xEF2016  	CLR	W11
0x07D2	0x20001A  	MOV	#1, W10
0x07D4	0x07FEBC  	RCALL	_ADC1_Init_Advanced
;click_analogkey_adc.h,7 :: 		}
L_end_analogkey_adcInit:
0x07D6	0x7805CF  	POP	W11
0x07D8	0x78054F  	POP	W10
0x07DA	0x060000  	RETURN
; end of _analogkey_adcInit
_ADC1_Init_Advanced:
0x054E	0xFA0000  	LNK	#0
;__Lib_ADC_12_p24HJ_p33.c,56 :: 		
;__Lib_ADC_12_p24HJ_p33.c,57 :: 		
0x0550	0x202F20  	MOV	#lo_addr(_ADC1_Get_Sample), W0
0x0552	0x884250  	MOV	W0, _ADC_Get_Sample_Ptr
;__Lib_ADC_12_p24HJ_p33.c,59 :: 		
0x0554	0x200E00  	MOV	#224, W0
0x0556	0xB7A320  	MOV	WREG, AD1CON1
;__Lib_ADC_12_p24HJ_p33.c,60 :: 		
0x0558	0xDD50CA  	SL	W10, #10, W1
0x055A	0x203200  	MOV	#lo_addr(AD1CON1), W0
0x055C	0x708810  	IOR	W1, [W0], [W0]
;__Lib_ADC_12_p24HJ_p33.c,61 :: 		
0x055E	0x2E0001  	MOV	#57344, W1
0x0560	0x203220  	MOV	#lo_addr(AD1CON2), W0
0x0562	0x658801  	AND	W11, W1, [W0]
;__Lib_ADC_12_p24HJ_p33.c,62 :: 		
0x0564	0x21F3F0  	MOV	#7999, W0
0x0566	0xB7A324  	MOV	WREG, AD1CON3
;__Lib_ADC_12_p24HJ_p33.c,63 :: 		
0x0568	0xEF2332  	CLR	AD1CON4
;__Lib_ADC_12_p24HJ_p33.c,64 :: 		
0x056A	0xEF2330  	CLR	AD1CSSL
;__Lib_ADC_12_p24HJ_p33.c,65 :: 		
0x056C	0xEF232E  	CLR	AD1CSSH
;__Lib_ADC_12_p24HJ_p33.c,66 :: 		
0x056E	0xA8E321  	BSET	AD1CON1, #15
;__Lib_ADC_12_p24HJ_p33.c,67 :: 		
L_end_ADC1_Init_Advanced:
0x0570	0xFA8000  	ULNK
0x0572	0x060000  	RETURN
; end of _ADC1_Init_Advanced
_applicationTask:
0x086A	0xFA0032  	LNK	#50
;Click_AnalogKey_DSPIC.c,51 :: 		void applicationTask()
;Click_AnalogKey_DSPIC.c,57 :: 		uint16_t sumValue = 0;
0x086C	0x781F8A  	PUSH	W10
0x086E	0x781F8B  	PUSH	W11
; sumValue start address is: 6 (W3)
0x0870	0xEF2006  	CLR	W3
;Click_AnalogKey_DSPIC.c,59 :: 		for(cnt = 0; cnt < 5; cnt++)
; cnt start address is: 8 (W4)
0x0872	0xEF2008  	CLR	W4
; sumValue end address is: 6 (W3)
; cnt end address is: 8 (W4)
L_applicationTask0:
; cnt start address is: 8 (W4)
; sumValue start address is: 6 (W3)
0x0874	0xE12465  	CP.B	W4, #5
0x0876	0x310007  	BRA GEU	L_applicationTask1
L__applicationTask14:
;Click_AnalogKey_DSPIC.c,61 :: 		ADC_value = analogkey_adcRead();
0x0878	0x781F83  	PUSH	W3
0x087A	0x07FEB8  	RCALL	_analogkey_adcRead
0x087C	0x7801CF  	POP	W3
;Click_AnalogKey_DSPIC.c,62 :: 		sumValue += ADC_value;
0x087E	0x418180  	ADD	W3, W0, W3
;Click_AnalogKey_DSPIC.c,63 :: 		Delay_10ms();
0x0880	0x07FF6B  	RCALL	_Delay_10ms
;Click_AnalogKey_DSPIC.c,59 :: 		for(cnt = 0; cnt < 5; cnt++)
0x0882	0xEC6008  	INC.B	W4
;Click_AnalogKey_DSPIC.c,64 :: 		}
; cnt end address is: 8 (W4)
0x0884	0x37FFF7  	BRA	L_applicationTask0
L_applicationTask1:
;Click_AnalogKey_DSPIC.c,65 :: 		ADC_value = sumValue / 5;
0x0886	0x200052  	MOV	#5, W2
0x0888	0x090011  	REPEAT	#17
0x088A	0xD88182  	DIV.U	W3, W2
; sumValue end address is: 6 (W3)
;Click_AnalogKey_DSPIC.c,66 :: 		isKey = analogkey_getKey(ADC_value);
0x088C	0x780500  	MOV	W0, W10
0x088E	0x07FEDE  	RCALL	_analogkey_getKey
; isKey start address is: 4 (W2)
0x0890	0x784100  	MOV.B	W0, W2
;Click_AnalogKey_DSPIC.c,68 :: 		if(isKey != _ANALOGKEY_NO_TOUCH)
0x0892	0xB3C001  	MOV.B	#0, W1
0x0894	0xE10401  	CP.B	W0, W1
0x0896	0x32000B  	BRA Z	L_applicationTask3
L__applicationTask15:
;Click_AnalogKey_DSPIC.c,70 :: 		IntToStr(isKey, demoText);
0x0898	0x470060  	ADD	W14, #0, W0
0x089A	0x780580  	MOV	W0, W11
0x089C	0xFB8502  	ZE	W2, W10
; isKey end address is: 4 (W2)
0x089E	0x07FEAE  	RCALL	_IntToStr
;Click_AnalogKey_DSPIC.c,71 :: 		mikrobus_logWrite("Pressed the button : ", _LOG_TEXT);
0x08A0	0xB3C01B  	MOV.B	#1, W11
0x08A2	0x20800A  	MOV	#lo_addr(?lstr3_Click_AnalogKey_DSPIC), W10
0x08A4	0x07FF9B  	RCALL	_mikrobus_logWrite
;Click_AnalogKey_DSPIC.c,72 :: 		mikrobus_logWrite(demoText, _LOG_LINE);
0x08A6	0x470060  	ADD	W14, #0, W0
0x08A8	0xB3C02B  	MOV.B	#2, W11
0x08AA	0x780500  	MOV	W0, W10
0x08AC	0x07FF97  	RCALL	_mikrobus_logWrite
;Click_AnalogKey_DSPIC.c,73 :: 		}
L_applicationTask3:
;Click_AnalogKey_DSPIC.c,74 :: 		Delay_ms( 300 );
0x08AE	0x200078  	MOV	#7, W8
0x08B0	0x21A817  	MOV	#6785, W7
L_applicationTask4:
0x08B2	0xED200E  	DEC	W7
0x08B4	0x3AFFFE  	BRA NZ	L_applicationTask4
0x08B6	0xED2010  	DEC	W8
0x08B8	0x3AFFFC  	BRA NZ	L_applicationTask4
;Click_AnalogKey_DSPIC.c,75 :: 		}
L_end_applicationTask:
0x08BA	0x7805CF  	POP	W11
0x08BC	0x78054F  	POP	W10
0x08BE	0xFA8000  	ULNK
0x08C0	0x060000  	RETURN
; end of _applicationTask
_analogkey_adcRead:
;click_analogkey_adc.h,14 :: 		uint32_t analogkey_adcRead()
;click_analogkey_adc.h,18 :: 		adcData = ADC1_Read(8);
0x05EC	0x781F8A  	PUSH	W10
0x05EE	0x20008A  	MOV	#8, W10
0x05F0	0x07FFC1  	RCALL	_ADC1_Read
; adcData start address is: 4 (W2)
0x05F2	0x780100  	MOV	W0, W2
0x05F4	0xEB0180  	CLR	W3
;click_analogkey_adc.h,19 :: 		return adcData;
0x05F6	0xBE0002  	MOV.D	W2, W0
; adcData end address is: 4 (W2)
;click_analogkey_adc.h,20 :: 		}
;click_analogkey_adc.h,19 :: 		return adcData;
;click_analogkey_adc.h,20 :: 		}
L_end_analogkey_adcRead:
0x05F8	0x78054F  	POP	W10
0x05FA	0x060000  	RETURN
; end of _analogkey_adcRead
_ADC1_Read:
0x0574	0xFA0000  	LNK	#0
;__Lib_ADC_12_p24HJ_p33.c,85 :: 		
;__Lib_ADC_12_p24HJ_p33.c,86 :: 		
0x0576	0x07FEAE  	RCALL	_ADC1_Init
;__Lib_ADC_12_p24HJ_p33.c,87 :: 		
0x0578	0x07FEBC  	RCALL	_ADC1_Get_Sample
;__Lib_ADC_12_p24HJ_p33.c,88 :: 		
L_end_ADC1_Read:
0x057A	0xFA8000  	ULNK
0x057C	0x060000  	RETURN
; end of _ADC1_Read
_ADC1_Init:
0x02D4	0xFA0000  	LNK	#0
;__Lib_ADC_12_p24HJ_p33.c,43 :: 		
;__Lib_ADC_12_p24HJ_p33.c,44 :: 		
0x02D6	0x202F20  	MOV	#lo_addr(_ADC1_Get_Sample), W0
0x02D8	0x884250  	MOV	W0, _ADC_Get_Sample_Ptr
;__Lib_ADC_12_p24HJ_p33.c,46 :: 		
0x02DA	0x200E00  	MOV	#224, W0
0x02DC	0xB7A320  	MOV	WREG, AD1CON1
;__Lib_ADC_12_p24HJ_p33.c,47 :: 		
0x02DE	0xA94321  	BCLR	AD1CON1, #10
;__Lib_ADC_12_p24HJ_p33.c,48 :: 		
0x02E0	0xEF2322  	CLR	AD1CON2
;__Lib_ADC_12_p24HJ_p33.c,49 :: 		
0x02E2	0x21F3F0  	MOV	#7999, W0
0x02E4	0xB7A324  	MOV	WREG, AD1CON3
;__Lib_ADC_12_p24HJ_p33.c,50 :: 		
0x02E6	0xEF2332  	CLR	AD1CON4
;__Lib_ADC_12_p24HJ_p33.c,51 :: 		
0x02E8	0xEF2330  	CLR	AD1CSSL
;__Lib_ADC_12_p24HJ_p33.c,52 :: 		
0x02EA	0xEF232E  	CLR	AD1CSSH
;__Lib_ADC_12_p24HJ_p33.c,53 :: 		
0x02EC	0xA8E321  	BSET	AD1CON1, #15
;__Lib_ADC_12_p24HJ_p33.c,54 :: 		
L_end_ADC1_Init:
0x02EE	0xFA8000  	ULNK
0x02F0	0x060000  	RETURN
; end of _ADC1_Init
_ADC1_Get_Sample:
0x02F2	0xFA0000  	LNK	#0
;__Lib_ADC_12_p24HJ_p33.c,69 :: 		
;__Lib_ADC_12_p24HJ_p33.c,70 :: 		
0x02F4	0xE1506F  	CP	W10, #15
0x02F6	0x360007  	BRA LEU	L_ADC1_Get_Sample0
L__ADC1_Get_Sample9:
;__Lib_ADC_12_p24HJ_p33.c,71 :: 		
0x02F8	0x5500F0  	SUB	W10, #16, W1
0x02FA	0x200010  	MOV	#1, W0
0x02FC	0xDD0001  	SL	W0, W1, W0
0x02FE	0xEA8080  	COM	W0, W1
0x0300	0x2032A0  	MOV	#lo_addr(AD1PCFGH), W0
0x0302	0x608810  	AND	W1, [W0], [W0]
0x0304	0x370005  	BRA	L_ADC1_Get_Sample1
L_ADC1_Get_Sample0:
;__Lib_ADC_12_p24HJ_p33.c,73 :: 		
0x0306	0x200010  	MOV	#1, W0
0x0308	0xDD000A  	SL	W0, W10, W0
0x030A	0xEA8080  	COM	W0, W1
0x030C	0x2032C0  	MOV	#lo_addr(AD1PCFGL), W0
0x030E	0x608810  	AND	W1, [W0], [W0]
L_ADC1_Get_Sample1:
;__Lib_ADC_12_p24HJ_p33.c,75 :: 		
0x0310	0x88194A  	MOV	W10, AD1CHS0
;__Lib_ADC_12_p24HJ_p33.c,76 :: 		
0x0312	0xA82320  	BSET.B	AD1CON1, #1
;__Lib_ADC_12_p24HJ_p33.c,78 :: 		
L_ADC1_Get_Sample2:
0x0314	0xAF0320  	BTSC	AD1CON1, #0
0x0316	0x370001  	BRA	L_ADC1_Get_Sample3
;__Lib_ADC_12_p24HJ_p33.c,79 :: 		
0x0318	0x37FFFD  	BRA	L_ADC1_Get_Sample2
L_ADC1_Get_Sample3:
;__Lib_ADC_12_p24HJ_p33.c,80 :: 		
0x031A	0xA90320  	BCLR.B	AD1CON1, #0
;__Lib_ADC_12_p24HJ_p33.c,82 :: 		
0x031C	0xBF8300  	MOV	ADC1BUF0, WREG
;__Lib_ADC_12_p24HJ_p33.c,83 :: 		
L_end_ADC1_Get_Sample:
0x031E	0xFA8000  	ULNK
0x0320	0x060000  	RETURN
; end of _ADC1_Get_Sample
_Delay_10ms:
;__Lib_Delays.c,640 :: 		void Delay_10ms()
;__Lib_Delays.c,642 :: 		Delay_ms(10);
0x0758	0x234157  	MOV	#13333, W7
L_Delay_10ms29:
0x075A	0xED200E  	DEC	W7
0x075C	0x3AFFFE  	BRA NZ	L_Delay_10ms29
0x075E	0x000000  	NOP
;__Lib_Delays.c,643 :: 		}
L_end_Delay_10ms:
0x0760	0x060000  	RETURN
; end of _Delay_10ms
_analogkey_getKey:
;__analogkey_Driver.c,85 :: 		uint8_t analogkey_getKey(uint16_t adcValue)
;__analogkey_Driver.c,87 :: 		if(adcValue >= (_maxADC/6 - _prec) && adcValue <= (_maxADC/6 + _prec))
0x064C	0x8041F0  	MOV	__analogkey_Driver__maxADC, W0
0x064E	0x200062  	MOV	#6, W2
0x0650	0x090011  	REPEAT	#17
0x0652	0xD88002  	DIV.U	W0, W2
0x0654	0x780080  	MOV	W0, W1
0x0656	0x208400  	MOV	#lo_addr(__analogkey_Driver__prec), W0
0x0658	0xFB8010  	ZE	[W0], W0
0x065A	0x508000  	SUB	W1, W0, W0
0x065C	0xE15000  	CP	W10, W0
0x065E	0x39000C  	BRA LTU	L__analogkey_getKey32
L__analogkey_getKey46:
0x0660	0x8041F0  	MOV	__analogkey_Driver__maxADC, W0
0x0662	0x200062  	MOV	#6, W2
0x0664	0x090011  	REPEAT	#17
0x0666	0xD88002  	DIV.U	W0, W2
0x0668	0x780080  	MOV	W0, W1
0x066A	0x208400  	MOV	#lo_addr(__analogkey_Driver__prec), W0
0x066C	0xFB8010  	ZE	[W0], W0
0x066E	0x408000  	ADD	W1, W0, W0
0x0670	0xE15000  	CP	W10, W0
0x0672	0x3E0002  	BRA GTU	L__analogkey_getKey31
L__analogkey_getKey47:
L__analogkey_getKey30:
;__analogkey_Driver.c,89 :: 		return _ANALOGKEY_TOUCH_KEY_6;
0x0674	0xB3C060  	MOV.B	#6, W0
0x0676	0x37006F  	BRA	L_end_analogkey_getKey
;__analogkey_Driver.c,87 :: 		if(adcValue >= (_maxADC/6 - _prec) && adcValue <= (_maxADC/6 + _prec))
L__analogkey_getKey32:
L__analogkey_getKey31:
;__analogkey_Driver.c,91 :: 		else if(adcValue >= (_maxADC/6 * 2 - _prec) && adcValue <= (_maxADC/6 * 2 + _prec))
0x0678	0x8041F0  	MOV	__analogkey_Driver__maxADC, W0
0x067A	0x200062  	MOV	#6, W2
0x067C	0x090011  	REPEAT	#17
0x067E	0xD88002  	DIV.U	W0, W2
0x0680	0xDD00C1  	SL	W0, #1, W1
0x0682	0x208400  	MOV	#lo_addr(__analogkey_Driver__prec), W0
0x0684	0xFB8010  	ZE	[W0], W0
0x0686	0x508000  	SUB	W1, W0, W0
0x0688	0xE15000  	CP	W10, W0
0x068A	0x39000C  	BRA LTU	L__analogkey_getKey34
L__analogkey_getKey48:
0x068C	0x8041F0  	MOV	__analogkey_Driver__maxADC, W0
0x068E	0x200062  	MOV	#6, W2
0x0690	0x090011  	REPEAT	#17
0x0692	0xD88002  	DIV.U	W0, W2
0x0694	0xDD00C1  	SL	W0, #1, W1
0x0696	0x208400  	MOV	#lo_addr(__analogkey_Driver__prec), W0
0x0698	0xFB8010  	ZE	[W0], W0
0x069A	0x408000  	ADD	W1, W0, W0
0x069C	0xE15000  	CP	W10, W0
0x069E	0x3E0002  	BRA GTU	L__analogkey_getKey33
L__analogkey_getKey49:
L__analogkey_getKey29:
;__analogkey_Driver.c,93 :: 		return _ANALOGKEY_TOUCH_KEY_5;
0x06A0	0xB3C050  	MOV.B	#5, W0
0x06A2	0x370059  	BRA	L_end_analogkey_getKey
;__analogkey_Driver.c,91 :: 		else if(adcValue >= (_maxADC/6 * 2 - _prec) && adcValue <= (_maxADC/6 * 2 + _prec))
L__analogkey_getKey34:
L__analogkey_getKey33:
;__analogkey_Driver.c,95 :: 		else if(adcValue >= (_maxADC/6 * 3 - _prec) && adcValue <= (_maxADC/6 * 3 + _prec))
0x06A4	0x8041F0  	MOV	__analogkey_Driver__maxADC, W0
0x06A6	0x200062  	MOV	#6, W2
0x06A8	0x090011  	REPEAT	#17
0x06AA	0xD88002  	DIV.U	W0, W2
0x06AC	0x780080  	MOV	W0, W1
0x06AE	0x200030  	MOV	#3, W0
0x06B0	0xB80900  	MUL.UU	W1, W0, W2
0x06B2	0x208400  	MOV	#lo_addr(__analogkey_Driver__prec), W0
0x06B4	0xFB8010  	ZE	[W0], W0
0x06B6	0x510000  	SUB	W2, W0, W0
0x06B8	0xE15000  	CP	W10, W0
0x06BA	0x39000E  	BRA LTU	L__analogkey_getKey36
L__analogkey_getKey50:
0x06BC	0x8041F0  	MOV	__analogkey_Driver__maxADC, W0
0x06BE	0x200062  	MOV	#6, W2
0x06C0	0x090011  	REPEAT	#17
0x06C2	0xD88002  	DIV.U	W0, W2
0x06C4	0x780080  	MOV	W0, W1
0x06C6	0x200030  	MOV	#3, W0
0x06C8	0xB80900  	MUL.UU	W1, W0, W2
0x06CA	0x208400  	MOV	#lo_addr(__analogkey_Driver__prec), W0
0x06CC	0xFB8010  	ZE	[W0], W0
0x06CE	0x410000  	ADD	W2, W0, W0
0x06D0	0xE15000  	CP	W10, W0
0x06D2	0x3E0002  	BRA GTU	L__analogkey_getKey35
L__analogkey_getKey51:
L__analogkey_getKey28:
;__analogkey_Driver.c,97 :: 		return _ANALOGKEY_TOUCH_KEY_4;
0x06D4	0xB3C040  	MOV.B	#4, W0
0x06D6	0x37003F  	BRA	L_end_analogkey_getKey
;__analogkey_Driver.c,95 :: 		else if(adcValue >= (_maxADC/6 * 3 - _prec) && adcValue <= (_maxADC/6 * 3 + _prec))
L__analogkey_getKey36:
L__analogkey_getKey35:
;__analogkey_Driver.c,99 :: 		else if(adcValue >= (_maxADC/6 * 4 - _prec) && adcValue <= (_maxADC/6 * 4 + _prec))
0x06D8	0x8041F0  	MOV	__analogkey_Driver__maxADC, W0
0x06DA	0x200062  	MOV	#6, W2
0x06DC	0x090011  	REPEAT	#17
0x06DE	0xD88002  	DIV.U	W0, W2
0x06E0	0xDD00C2  	SL	W0, #2, W1
0x06E2	0x208400  	MOV	#lo_addr(__analogkey_Driver__prec), W0
0x06E4	0xFB8010  	ZE	[W0], W0
0x06E6	0x508000  	SUB	W1, W0, W0
0x06E8	0xE15000  	CP	W10, W0
0x06EA	0x39000C  	BRA LTU	L__analogkey_getKey38
L__analogkey_getKey52:
0x06EC	0x8041F0  	MOV	__analogkey_Driver__maxADC, W0
0x06EE	0x200062  	MOV	#6, W2
0x06F0	0x090011  	REPEAT	#17
0x06F2	0xD88002  	DIV.U	W0, W2
0x06F4	0xDD00C2  	SL	W0, #2, W1
0x06F6	0x208400  	MOV	#lo_addr(__analogkey_Driver__prec), W0
0x06F8	0xFB8010  	ZE	[W0], W0
0x06FA	0x408000  	ADD	W1, W0, W0
0x06FC	0xE15000  	CP	W10, W0
0x06FE	0x3E0002  	BRA GTU	L__analogkey_getKey37
L__analogkey_getKey53:
L__analogkey_getKey27:
;__analogkey_Driver.c,101 :: 		return _ANALOGKEY_TOUCH_KEY_3;
0x0700	0xB3C030  	MOV.B	#3, W0
0x0702	0x370029  	BRA	L_end_analogkey_getKey
;__analogkey_Driver.c,99 :: 		else if(adcValue >= (_maxADC/6 * 4 - _prec) && adcValue <= (_maxADC/6 * 4 + _prec))
L__analogkey_getKey38:
L__analogkey_getKey37:
;__analogkey_Driver.c,103 :: 		else if(adcValue >= (_maxADC/6 * 5 - _prec) && adcValue <= (_maxADC/6 * 5 + _prec))
0x0704	0x8041F0  	MOV	__analogkey_Driver__maxADC, W0
0x0706	0x200062  	MOV	#6, W2
0x0708	0x090011  	REPEAT	#17
0x070A	0xD88002  	DIV.U	W0, W2
0x070C	0x780080  	MOV	W0, W1
0x070E	0x200050  	MOV	#5, W0
0x0710	0xB80900  	MUL.UU	W1, W0, W2
0x0712	0x208400  	MOV	#lo_addr(__analogkey_Driver__prec), W0
0x0714	0xFB8010  	ZE	[W0], W0
0x0716	0x510000  	SUB	W2, W0, W0
0x0718	0xE15000  	CP	W10, W0
0x071A	0x39000E  	BRA LTU	L__analogkey_getKey40
L__analogkey_getKey54:
0x071C	0x8041F0  	MOV	__analogkey_Driver__maxADC, W0
0x071E	0x200062  	MOV	#6, W2
0x0720	0x090011  	REPEAT	#17
0x0722	0xD88002  	DIV.U	W0, W2
0x0724	0x780080  	MOV	W0, W1
0x0726	0x200050  	MOV	#5, W0
0x0728	0xB80900  	MUL.UU	W1, W0, W2
0x072A	0x208400  	MOV	#lo_addr(__analogkey_Driver__prec), W0
0x072C	0xFB8010  	ZE	[W0], W0
0x072E	0x410000  	ADD	W2, W0, W0
0x0730	0xE15000  	CP	W10, W0
0x0732	0x3E0002  	BRA GTU	L__analogkey_getKey39
L__analogkey_getKey55:
L__analogkey_getKey26:
;__analogkey_Driver.c,105 :: 		return _ANALOGKEY_TOUCH_KEY_2;
0x0734	0xB3C020  	MOV.B	#2, W0
0x0736	0x37000F  	BRA	L_end_analogkey_getKey
;__analogkey_Driver.c,103 :: 		else if(adcValue >= (_maxADC/6 * 5 - _prec) && adcValue <= (_maxADC/6 * 5 + _prec))
L__analogkey_getKey40:
L__analogkey_getKey39:
;__analogkey_Driver.c,107 :: 		else if(adcValue >= (_maxADC - _prec) && adcValue <= (_maxADC + _prec))
0x0738	0x208400  	MOV	#lo_addr(__analogkey_Driver__prec), W0
0x073A	0xFB8090  	ZE	[W0], W1
0x073C	0x2083E0  	MOV	#lo_addr(__analogkey_Driver__maxADC), W0
0x073E	0x108010  	SUBR	W1, [W0], W0
0x0740	0xE15000  	CP	W10, W0
0x0742	0x390008  	BRA LTU	L__analogkey_getKey42
L__analogkey_getKey56:
0x0744	0x208400  	MOV	#lo_addr(__analogkey_Driver__prec), W0
0x0746	0xFB8090  	ZE	[W0], W1
0x0748	0x2083E0  	MOV	#lo_addr(__analogkey_Driver__maxADC), W0
0x074A	0x408010  	ADD	W1, [W0], W0
0x074C	0xE15000  	CP	W10, W0
0x074E	0x3E0002  	BRA GTU	L__analogkey_getKey41
L__analogkey_getKey57:
L__analogkey_getKey25:
;__analogkey_Driver.c,109 :: 		return _ANALOGKEY_TOUCH_KEY_1;
0x0750	0xB3C010  	MOV.B	#1, W0
0x0752	0x370001  	BRA	L_end_analogkey_getKey
;__analogkey_Driver.c,107 :: 		else if(adcValue >= (_maxADC - _prec) && adcValue <= (_maxADC + _prec))
L__analogkey_getKey42:
L__analogkey_getKey41:
;__analogkey_Driver.c,111 :: 		return _ANALOGKEY_NO_TOUCH;
0x0754	0xEF2000  	CLR	W0
;__analogkey_Driver.c,112 :: 		}
L_end_analogkey_getKey:
0x0756	0x060000  	RETURN
; end of _analogkey_getKey
_IntToStr:
0x05FC	0xFA0000  	LNK	#0
;__Lib_Conversions.c,195 :: 		
;__Lib_Conversions.c,201 :: 		
0x05FE	0x781F8A  	PUSH	W10
; negative start address is: 8 (W4)
0x0600	0xEF2008  	CLR	W4
;__Lib_Conversions.c,202 :: 		
; inword start address is: 0 (W0)
0x0602	0x78000A  	MOV	W10, W0
;__Lib_Conversions.c,203 :: 		
0x0604	0xE15060  	CP	W10, #0
0x0606	0x3D0003  	BRA GE	L__IntToStr113
L__IntToStr156:
; inword end address is: 0 (W0)
;__Lib_Conversions.c,204 :: 		
0x0608	0x200014  	MOV	#1, W4
;__Lib_Conversions.c,205 :: 		
; inword start address is: 0 (W0)
0x060A	0x150060  	SUBR	W10, #0, W0
; inword end address is: 0 (W0)
; negative end address is: 8 (W4)
;__Lib_Conversions.c,206 :: 		
0x060C	0x370000  	BRA	L_IntToStr37
L__IntToStr113:
;__Lib_Conversions.c,203 :: 		
;__Lib_Conversions.c,206 :: 		
L_IntToStr37:
;__Lib_Conversions.c,207 :: 		
; inword start address is: 0 (W0)
; negative start address is: 8 (W4)
0x060E	0x780500  	MOV	W0, W10
; inword end address is: 0 (W0)
0x0610	0x07FFC7  	RCALL	_WordToStr
;__Lib_Conversions.c,209 :: 		
; i start address is: 6 (W3)
0x0612	0x200063  	MOV	#6, W3
; negative end address is: 8 (W4)
; i end address is: 6 (W3)
0x0614	0x780104  	MOV	W4, W2
;__Lib_Conversions.c,210 :: 		
L_IntToStr38:
; i start address is: 6 (W3)
; negative start address is: 4 (W2)
0x0616	0xE11860  	CP	W3, #0
0x0618	0x360006  	BRA LEU	L_IntToStr39
L__IntToStr157:
;__Lib_Conversions.c,211 :: 		
0x061A	0x458083  	ADD	W11, W3, W1
0x061C	0x518061  	SUB	W3, #1, W0
0x061E	0x458000  	ADD	W11, W0, W0
0x0620	0x784890  	MOV.B	[W0], [W1]
;__Lib_Conversions.c,212 :: 		
0x0622	0xED2006  	DEC	W3
;__Lib_Conversions.c,213 :: 		
; i end address is: 6 (W3)
0x0624	0x37FFF8  	BRA	L_IntToStr38
L_IntToStr39:
;__Lib_Conversions.c,214 :: 		
0x0626	0xB3C200  	MOV.B	#32, W0
0x0628	0x784D80  	MOV.B	W0, [W11]
;__Lib_Conversions.c,215 :: 		
0x062A	0xE20004  	CP0	W2
0x062C	0x32000C  	BRA Z	L_IntToStr40
L__IntToStr158:
; negative end address is: 4 (W2)
;__Lib_Conversions.c,216 :: 		
; i start address is: 4 (W2)
0x062E	0xEF2004  	CLR	W2
; i end address is: 4 (W2)
;__Lib_Conversions.c,217 :: 		
L_IntToStr41:
; i start address is: 4 (W2)
0x0630	0x458002  	ADD	W11, W2, W0
0x0632	0x784090  	MOV.B	[W0], W1
0x0634	0xB3C200  	MOV.B	#32, W0
0x0636	0xE10C00  	CP.B	W1, W0
0x0638	0x3A0002  	BRA NZ	L_IntToStr42
L__IntToStr159:
; i start address is: 4 (W2)
0x063A	0xEC2004  	INC	W2
; i end address is: 4 (W2)
0x063C	0x37FFF9  	BRA	L_IntToStr41
L_IntToStr42:
;__Lib_Conversions.c,218 :: 		
0x063E	0x510061  	SUB	W2, #1, W0
; i end address is: 4 (W2)
;__Lib_Conversions.c,219 :: 		
0x0640	0x458080  	ADD	W11, W0, W1
0x0642	0xB3C2D0  	MOV.B	#45, W0
0x0644	0x784880  	MOV.B	W0, [W1]
L_IntToStr40:
;__Lib_Conversions.c,220 :: 		
L_end_IntToStr:
0x0646	0x78054F  	POP	W10
0x0648	0xFA8000  	ULNK
0x064A	0x060000  	RETURN
; end of _IntToStr
_WordToStr:
0x05A0	0xFA0002  	LNK	#2
;__Lib_Conversions.c,98 :: 		
;__Lib_Conversions.c,103 :: 		
; len start address is: 4 (W2)
0x05A2	0xEF2004  	CLR	W2
; len end address is: 4 (W2)
L_WordToStr11:
; len start address is: 4 (W2)
0x05A4	0xE11465  	CP.B	W2, #5
0x05A6	0x310006  	BRA GEU	L_WordToStr12
L__WordToStr139:
;__Lib_Conversions.c,104 :: 		
0x05A8	0xFB8002  	ZE	W2, W0
0x05AA	0x458080  	ADD	W11, W0, W1
0x05AC	0xB3C200  	MOV.B	#32, W0
0x05AE	0x784880  	MOV.B	W0, [W1]
;__Lib_Conversions.c,103 :: 		
0x05B0	0xEC6004  	INC.B	W2
;__Lib_Conversions.c,104 :: 		
0x05B2	0x37FFF8  	BRA	L_WordToStr11
L_WordToStr12:
;__Lib_Conversions.c,105 :: 		
0x05B4	0xFB8002  	ZE	W2, W0
0x05B6	0x458080  	ADD	W11, W0, W1
0x05B8	0xEF2000  	CLR	W0
0x05BA	0x784880  	MOV.B	W0, [W1]
; len start address is: 6 (W3)
0x05BC	0x5141E1  	SUB.B	W2, #1, W3
; len end address is: 4 (W2)
; len end address is: 6 (W3)
;__Lib_Conversions.c,107 :: 		
L_WordToStr14:
;__Lib_Conversions.c,108 :: 		
; len start address is: 6 (W3)
0x05BE	0xFB8003  	ZE	W3, W0
0x05C0	0x458000  	ADD	W11, W0, W0
0x05C2	0x980700  	MOV	W0, [W14+0]
0x05C4	0x2000A2  	MOV	#10, W2
0x05C6	0x090011  	REPEAT	#17
0x05C8	0xD88502  	DIV.U	W10, W2
0x05CA	0x200300  	MOV	#48, W0
0x05CC	0x408080  	ADD	W1, W0, W1
0x05CE	0x90000E  	MOV	[W14+0], W0
0x05D0	0x784801  	MOV.B	W1, [W0]
;__Lib_Conversions.c,109 :: 		
0x05D2	0x2000A2  	MOV	#10, W2
0x05D4	0x090011  	REPEAT	#17
0x05D6	0xD88502  	DIV.U	W10, W2
0x05D8	0x780500  	MOV	W0, W10
;__Lib_Conversions.c,110 :: 		
0x05DA	0xE10060  	CP	W0, #0
0x05DC	0x3A0001  	BRA NZ	L_WordToStr16
L__WordToStr140:
; len end address is: 6 (W3)
;__Lib_Conversions.c,111 :: 		
0x05DE	0x370002  	BRA	L_WordToStr15
L_WordToStr16:
;__Lib_Conversions.c,112 :: 		
; len start address is: 6 (W3)
0x05E0	0xED6006  	DEC.B	W3
;__Lib_Conversions.c,113 :: 		
; len end address is: 6 (W3)
0x05E2	0x37FFED  	BRA	L_WordToStr14
L_WordToStr15:
;__Lib_Conversions.c,114 :: 		
L_end_WordToStr:
0x05E4	0xFA8000  	ULNK
0x05E6	0x060000  	RETURN
; end of _WordToStr
0x0900	0x20800A  	MOV	#2048, W10
0x0902	0x20000B  	MOV	#0, W11
0x0904	0x090026  	REPEAT	#38
0x0906	0x781D0B  	MOV	W11, [W10++]
0x0908	0x060000  	RETURN
0x090A	0x208001  	MOV	#lo_addr(?lstr3_Click_AnalogKey_DSPIC), W1
0x090C	0x280000  	MOV	#32768, W0
0x090E	0x09001F  	REPEAT	#31
0x0910	0x7818B0  	MOV	[W0++], [W1++]
0x0912	0x7858B0  	MOV.B	[W0++], [W1++]
0x0914	0x060000  	RETURN
;Click_AnalogKey_DSPIC.c,0 :: ?ICS?lstr3_Click_AnalogKey_DSPIC [22]
0x8000	0x7250 ;?ICS?lstr3_Click_AnalogKey_DSPIC+0
0x8002	0x7365 ;?ICS?lstr3_Click_AnalogKey_DSPIC+2
0x8004	0x6573 ;?ICS?lstr3_Click_AnalogKey_DSPIC+4
0x8006	0x2064 ;?ICS?lstr3_Click_AnalogKey_DSPIC+6
0x8008	0x6874 ;?ICS?lstr3_Click_AnalogKey_DSPIC+8
0x800A	0x2065 ;?ICS?lstr3_Click_AnalogKey_DSPIC+10
0x800C	0x7562 ;?ICS?lstr3_Click_AnalogKey_DSPIC+12
0x800E	0x7474 ;?ICS?lstr3_Click_AnalogKey_DSPIC+14
0x8010	0x6E6F ;?ICS?lstr3_Click_AnalogKey_DSPIC+16
0x8012	0x3A20 ;?ICS?lstr3_Click_AnalogKey_DSPIC+18
0x8014	0x0020 ;?ICS?lstr3_Click_AnalogKey_DSPIC+20
; end of ?ICS?lstr3_Click_AnalogKey_DSPIC
;Click_AnalogKey_DSPIC.c,0 :: ?ICS?lstr1_Click_AnalogKey_DSPIC [20]
0x8016	0x2D2D ;?ICS?lstr1_Click_AnalogKey_DSPIC+0
0x8018	0x202D ;?ICS?lstr1_Click_AnalogKey_DSPIC+2
0x801A	0x7953 ;?ICS?lstr1_Click_AnalogKey_DSPIC+4
0x801C	0x7473 ;?ICS?lstr1_Click_AnalogKey_DSPIC+6
0x801E	0x6D65 ;?ICS?lstr1_Click_AnalogKey_DSPIC+8
0x8020	0x4920 ;?ICS?lstr1_Click_AnalogKey_DSPIC+10
0x8022	0x696E ;?ICS?lstr1_Click_AnalogKey_DSPIC+12
0x8024	0x2074 ;?ICS?lstr1_Click_AnalogKey_DSPIC+14
0x8026	0x2D2D ;?ICS?lstr1_Click_AnalogKey_DSPIC+16
0x8028	0x002D ;?ICS?lstr1_Click_AnalogKey_DSPIC+18
; end of ?ICS?lstr1_Click_AnalogKey_DSPIC
;Click_AnalogKey_DSPIC.c,0 :: ?ICS?lstr2_Click_AnalogKey_DSPIC [20]
0x802A	0x7250 ;?ICS?lstr2_Click_AnalogKey_DSPIC+0
0x802C	0x7365 ;?ICS?lstr2_Click_AnalogKey_DSPIC+2
0x802E	0x2073 ;?ICS?lstr2_Click_AnalogKey_DSPIC+4
0x8030	0x6874 ;?ICS?lstr2_Click_AnalogKey_DSPIC+6
0x8032	0x2065 ;?ICS?lstr2_Click_AnalogKey_DSPIC+8
0x8034	0x7562 ;?ICS?lstr2_Click_AnalogKey_DSPIC+10
0x8036	0x7474 ;?ICS?lstr2_Click_AnalogKey_DSPIC+12
0x8038	0x6E6F ;?ICS?lstr2_Click_AnalogKey_DSPIC+14
0x803A	0x3A20 ;?ICS?lstr2_Click_AnalogKey_DSPIC+16
0x803C	0x0044 ;?ICS?lstr2_Click_AnalogKey_DSPIC+18
; end of ?ICS?lstr2_Click_AnalogKey_DSPIC
;__analogkey_Driver.c,0 :: ?ICS__analogkey_Driver__maxADC [2]
0x803E	0x0400 ;?ICS__analogkey_Driver__maxADC+0
; end of ?ICS__analogkey_Driver__maxADC
;__analogkey_Driver.c,0 :: ?ICS__analogkey_Driver__prec [1]
0x8040	0x33 ;?ICS__analogkey_Driver__prec+0
; end of ?ICS__analogkey_Driver__prec
;easypicfusion_v7_P33FJ256GP710A.c,47 :: __MIKROBUS1_GPIO [48]
0x8042	0xFFFF ;__MIKROBUS1_GPIO+0
0x8044	0xFFFF ;__MIKROBUS1_GPIO+2
0x8046	0xFFFF ;__MIKROBUS1_GPIO+4
0x8048	0xFFFF ;__MIKROBUS1_GPIO+6
0x804A	0xFFFF ;__MIKROBUS1_GPIO+8
0x804C	0xFFFF ;__MIKROBUS1_GPIO+10
0x804E	0xFFFF ;__MIKROBUS1_GPIO+12
0x8050	0xFFFF ;__MIKROBUS1_GPIO+14
0x8052	0xFFFF ;__MIKROBUS1_GPIO+16
0x8054	0xFFFF ;__MIKROBUS1_GPIO+18
0x8056	0xFFFF ;__MIKROBUS1_GPIO+20
0x8058	0xFFFF ;__MIKROBUS1_GPIO+22
0x805A	0xFFFF ;__MIKROBUS1_GPIO+24
0x805C	0xFFFF ;__MIKROBUS1_GPIO+26
0x805E	0xFFFF ;__MIKROBUS1_GPIO+28
0x8060	0xFFFF ;__MIKROBUS1_GPIO+30
0x8062	0xFFFF ;__MIKROBUS1_GPIO+32
0x8064	0xFFFF ;__MIKROBUS1_GPIO+34
0x8066	0xFFFF ;__MIKROBUS1_GPIO+36
0x8068	0xFFFF ;__MIKROBUS1_GPIO+38
0x806A	0xFFFF ;__MIKROBUS1_GPIO+40
0x806C	0xFFFF ;__MIKROBUS1_GPIO+42
0x806E	0xFFFF ;__MIKROBUS1_GPIO+44
0x8070	0xFFFF ;__MIKROBUS1_GPIO+46
; end of __MIKROBUS1_GPIO
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200      [14]    _Delay_100ms
0x020E       [4]    _Get_Fosc_Per_Cyc
0x0212      [18]    __Multiply_32x32
0x0224      [82]    __Divide_32x32
0x0276      [88]    __Modulus_32x32
0x02CE       [6]    _Get_Fosc_kHz
0x02D4      [30]    _ADC1_Init
0x02F2      [48]    _ADC1_Get_Sample
0x0322      [14]    _UART2_Write
0x0330     [258]    _UART1_Init
0x0432      [14]    _UART1_Write
0x0440     [258]    _UART2_Init
0x0542      [10]    easypicfusion_v7_P33FJ256GP710A__log_init1
0x054C       [2]    __analogkey_Driver_hal_gpioMap
0x054E      [38]    _ADC1_Init_Advanced
0x0574      [10]    _ADC1_Read
0x057E      [14]    easypicfusion_v7_P33FJ256GP710A__log_write
0x058C      [10]    easypicfusion_v7_P33FJ256GP710A__log_initUartB
0x0596      [10]    easypicfusion_v7_P33FJ256GP710A__log_initUartA
0x05A0      [72]    _WordToStr
0x05E8       [4]    easypicfusion_v7_P33FJ256GP710A__log_init2
0x05EC      [16]    _analogkey_adcRead
0x05FC      [80]    _IntToStr
0x064C     [268]    _analogkey_getKey
0x0758      [10]    _Delay_10ms
0x0762      [28]    _analogkey_setResolution
0x077E      [74]    _mikrobus_logInit
0x07C8       [4]    _analogkey_gpioDriverInit
0x07CC      [16]    _analogkey_adcInit
0x07DC     [110]    _mikrobus_logWrite
0x084A       [2]    _analogkey_adcSetInputChannel
0x084C      [30]    _applicationInit
0x086A      [88]    _applicationTask
0x08C2      [30]    _systemInit
0x08E0      [32]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0842       [2]    _UART_Rdy_Ptr
0x0844       [2]    _UART_Tx_Idle_Ptr
0x0220       [2]    U1MODE
0x0846       [2]    _UART_Rd_Ptr
0x0328       [2]    AD1CHS0
0x0300       [2]    ADC1BUF0
0x0848       [2]    _UART_Wr_Ptr
0x0238       [2]    U2BRG
0x0234       [2]    U2TXREG
0x0224       [2]    U1TXREG
0x0232       [2]    U2STA
0x0222       [2]    U1STA
0x0228       [2]    U1BRG
0x0230       [2]    U2MODE
0x032C       [2]    AD1PCFGL
0x084A       [2]    _ADC_Get_Sample_Ptr
0x084C       [2]    _logger
0x0330       [2]    AD1CSSL
0x032E       [2]    AD1CSSH
0x032A       [2]    AD1PCFGH
0x0332       [2]    AD1CON4
0x0320       [2]    AD1CON1
0x0322       [2]    AD1CON2
0x0324       [2]    AD1CON3
0x0800      [22]    ?lstr3_Click_AnalogKey_DSPIC
0x0816      [20]    ?lstr1_Click_AnalogKey_DSPIC
0x082A      [20]    ?lstr2_Click_AnalogKey_DSPIC
0x083E       [2]    __analogkey_Driver__maxADC
0x0840       [1]    __analogkey_Driver__prec
0x0220       [2]    U1MODE
0x0222       [2]    U1STA
0x0224       [2]    U1TXREG
0x0228       [2]    U1BRG
0x0230       [2]    U2MODE
0x0232       [2]    U2STA
0x0234       [2]    U2TXREG
0x0238       [2]    U2BRG
0x0014       [2]    FARG_ADC1_Get_Sample_channel
0x0300       [2]    ADC1BUF0
0x0320       [2]    AD1CON1
0x0014       [2]    FARG_UART2_Write__data
0x0322       [2]    AD1CON2
0x0324       [2]    AD1CON3
0x0328       [2]    AD1CHS0
0x032A       [2]    AD1PCFGH
0x032C       [2]    AD1PCFGL
0x032E       [2]    AD1CSSH
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0330       [2]    AD1CSSL
0x0332       [2]    AD1CON4
0x0014       [2]    FARG_UART1_Write__data
0x0014       [4]    FARG_UART2_Init_baud_rate
0x0014       [4]    FARG_easypicfusion_v7_P33FJ256GP710A__log_init1_baud
0x0014       [2]    FARG___analogkey_Driver_hal_gpioMap_gpioObj
0x0014       [2]    FARG_ADC1_Init_Advanced_AdcMode
0x0016       [2]    FARG_ADC1_Init_Advanced_Reference
0x0014       [2]    FARG_ADC1_Read_channel
0x0014       [2]    FARG_easypicfusion_v7_P33FJ256GP710A__log_write_data_
0x0014       [4]    FARG_easypicfusion_v7_P33FJ256GP710A__log_initUartB_baud
0x0014       [4]    FARG_easypicfusion_v7_P33FJ256GP710A__log_initUartA_baud
0x0014       [2]    FARG_WordToStr_input
0x0016       [2]    FARG_WordToStr_output
0x0014       [4]    FARG_easypicfusion_v7_P33FJ256GP710A__log_init2_baud
0x0014       [2]    FARG_IntToStr_input
0x0016       [2]    FARG_IntToStr_output
0x0014       [2]    FARG_analogkey_getKey_adcValue
0x0014       [1]    FARG_analogkey_setResolution_resolution
0x0014       [1]    FARG_mikrobus_logInit_port
0x0016       [4]    FARG_mikrobus_logInit_baud
0x0014       [2]    FARG_analogkey_gpioDriverInit_gpioObj
0x0014       [2]    FARG_mikrobus_logWrite_data_
0x0016       [1]    FARG_mikrobus_logWrite_format
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x8000      [22]    ?ICS?lstr3_Click_AnalogKey_DSPIC
0x8016      [20]    ?ICS?lstr1_Click_AnalogKey_DSPIC
0x802A      [20]    ?ICS?lstr2_Click_AnalogKey_DSPIC
0x803E       [2]    ?ICS__analogkey_Driver__maxADC
0x8040       [1]    ?ICS__analogkey_Driver__prec
0x8042      [48]    __MIKROBUS1_GPIO
